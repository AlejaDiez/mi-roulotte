---
import type { BaseProps } from "@utils/props";

export interface Props extends BaseProps {
    stages: {
        title?: string;
        image?: string | null;
        url: string;
    }[];
}

const { stages, id, class: cls } = Astro.props;
const currentStage = stages.findIndex(({ url }) =>
    Astro.url.href.includes(url)
);
---

{
    currentStage === -1 ? (
        <section
            {id}
            class:list={cls}
            class="stage-section animation-delay-[375ms] animate-fade flex w-full flex-col items-start justify-start gap-[calc(var(--space)*4)]">
            <div class="scroll scrollbar-hidden relative -left-(--space-x) w-[calc(var(--space-x)*2+100%)] snap-x snap-mandatory scroll-p-(--space-x) overflow-x-auto scroll-smooth">
                <div class="stages flex w-max flex-row items-start justify-start gap-[calc(var(--space)*4)] px-(--space-x)">
                    {stages.map(({ title, image, url }) => (
                        <a href={url} class="card snap-start">
                            <div>
                                <img src={image} alt={title} decoding="async" />
                            </div>
                            <span>{title}</span>
                        </a>
                    ))}
                </div>
            </div>
            <div class="controls flex w-full flex-row items-center justify-end max-md:justify-start">
                <button class="button button-fill-primary">
                    <i class="ibm-chevron-left" />
                </button>
                <button class="button button-fill-primary">
                    <i class="ibm-chevron-right" />
                </button>
            </div>       
        </section>
        <script>
            const container = document.body.querySelector<HTMLDivElement>(".scroll")!;
            const cards = [...container.querySelectorAll<HTMLDivElement>(".card")];
            const controls = document.body.querySelectorAll<HTMLButtonElement>(
                ".controls > .button"
            )!;

            controls[0].addEventListener("click", () => {
                const scrollPadding = Math.trunc(
                    parseFloat(getComputedStyle(container).scrollPaddingLeft)
                );
                const prevCard = [...cards]
                    .reverse()
                    .find((e) => e.getBoundingClientRect().x - scrollPadding < -2);
                const prevScroll = prevCard?.getBoundingClientRect().x ?? 0;

                container.scrollBy({
                    left: prevScroll - scrollPadding,
                    behavior: "smooth"
                });
            });
            controls[1].addEventListener("click", () => {
                const scrollPadding = parseFloat(
                    getComputedStyle(container).scrollPaddingLeft
                );
                const nextCard = [...cards].find(
                    (e) => e.getBoundingClientRect().x - scrollPadding > 2
                );
                const nextScroll = nextCard?.getBoundingClientRect().x ?? 0;

                container.scrollBy({
                    left: nextScroll - scrollPadding,
                    behavior: "smooth"
                });
            });
        </script>
    ) : (
        <section
            {id}
            class:list={cls}
            class="stage-section animation-delay-[375ms] animate-fade flex w-full flex-row items-center justify-between max-md:justify-start">
            {currentStage > 0 ? (
                <a
                    href={stages[currentStage - 1]!.url}
                    class="control button button-fill-primary">
                    <i class="ibm-chevron-left" />
                </a>
            ) : (
                <a
                    href={Astro.url.pathname.split("/").slice(0, -1).join("/")}
                    class="control button button-fill-primary">
                    <i class="ibm-home" />
                </a>
            )}
            <div class="stages flex flex-row flex-wrap items-center justify-center">
                {stages.map(({ url }, i) =>
                    currentStage !== i ? (
                        <a
                            href={url}
                            class="button button-muted font-semibold max-md:hidden">
                            {i + 1}
                        </a>
                    ) : (
                        <span class="button button-primary cursor-default font-semibold">
                            {i + 1}
                        </span>
                    )
                )}
            </div>
            {currentStage < stages.length - 1 ? (
                <a
                    href={stages[currentStage + 1]!.url}
                    class="control button button-fill-primary">
                    <i class="ibm-chevron-right" />
                </a>
            ) : (
                <div class="empty-control w-14" />
            )}
        </section>
    )
}


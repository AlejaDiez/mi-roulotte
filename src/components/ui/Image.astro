---
import type { BaseProps } from "@interfaces/props";

export interface Props extends BaseProps {
    url: string;
    caption?: string;
}

const { url, caption, id, style, class: cls } = Astro.props;
---

<figure
    {id}
    {style}
    class:list={cls}
    class="image bg-muted group relative h-auto w-auto cursor-pointer overflow-hidden select-none">
    <img
        src={url}
        alt={caption}
        loading="lazy"
        decoding="async"
        class:list={{
            "group-hover:opacity-0": caption
        }}
        class="img bg-muted pointer-events-none relative z-10 h-full w-full border-none object-cover transition-[scale,opacity] duration-300 outline-none group-hover:scale-110"
    />
    {
        caption && (
            <figcaption class="caption text-normal text-foreground-variant absolute top-0 left-0 h-full w-full content-center text-center">
                {caption}
            </figcaption>
        )
    }
</figure>

<style is:global>
    body:has(.lightbox) {
        overflow: hidden;
    }
</style>

<script>
    const images = document.body.querySelectorAll<HTMLDivElement>(".image");

    const buildLightbox = (img: string, caption?: string) => {
        const lightboxContainer = document.createElement("div");
        const imageElement = lightboxContainer.appendChild(
            document.createElement("div")
        );
        const imgElement = imageElement.appendChild(
            document.createElement("img")
        );
        const captionElement = caption
            ? lightboxContainer.appendChild(document.createElement("span"))
            : undefined;
        const closeButton = lightboxContainer.appendChild(
            document.createElement("button")
        );

        // Image
        imageElement.classList.add("image");
        imgElement.src = img;
        imgElement.alt = caption ?? "";
        imgElement.decoding = "async";
        imgElement.classList.add("img");

        // Caption
        if (captionElement) {
            captionElement.textContent = caption!;
            captionElement.classList.add("caption");
        }

        // Close button
        closeButton.innerHTML = `<i class="ibm-close"></i>`;
        closeButton.classList.add("button", "button-fill-primary");
        closeButton.onclick = () => {
            document.body.removeChild(lightboxContainer);
        };

        lightboxContainer.classList.add("lightbox");
        return lightboxContainer;
    };

    for (const image of images) {
        const img = image.querySelector<HTMLImageElement>(".img")!.src;
        const caption = image.querySelector<HTMLElement>(".caption")?.innerText;

        const clickCallback = () => {
            let lightbox =
                document.body.querySelector<HTMLDivElement>(".lightbox");

            if (lightbox) {
                document.body.removeChild(lightbox);
            }
            lightbox = buildLightbox(img, caption);
            document.body.appendChild(lightbox);
        };

        image.addEventListener("click", clickCallback);
    }
</script>

---
import type { BaseProps } from "@utils/props";

export interface Props extends BaseProps {
    value?: any[];
}

const { value, id, style, class: cls } = Astro.props;
---

<block-editor
    {id}
    {style}
    value={JSON.stringify(value)}
    class:list={cls}
    class="editor h-auto w-full">
</block-editor>

<style is:global>
    /* Editor */
    block-editor {
        /* Block List */
        .block-list {
            display: flex;
            flex-direction: column;
            justify-content: start;
            align-items: start;
        }

        /* Toolbar */
        .toolbar {
            display: flex;
            position: absolute;
            top: 0;
            left: 0;
            flex-direction: row;
            justify-content: center;
            translate: -50% -100%;
            z-index: 10;
            background-color: var(--color-muted);
            width: auto;
            height: 40px;
            min-height: 40px;
            max-height: 40px;

            /* Components */
            button.button {
                padding: 0 calc(10px * 24 / 18);
                min-width: 2.5rem;
                height: 2.5rem;
                min-height: 2.5rem;
                max-height: 2.5rem;
                text-wrap: nowrap;

                &.button-fill-accent {
                    background-color: light-dark(
                        var(--color-blue-10),
                        var(--color-blue-90)
                    );
                    color: var(--color-accent);

                    &:hover {
                        background-color: light-dark(
                            var(--color-blue-10-hover),
                            var(--color-blue-90-hover)
                        );
                    }
                }

                &:has(i:first-child) {
                    padding-left: 10px;
                }

                &:has(i:last-child) {
                    padding-right: 10px;
                }
            }

            input[type="text"].input {
                border: none;
                padding: 0 calc(10px * 24 / 18);
                min-width: 16rem;
                height: 2.5rem;
                min-height: 2.5rem;
                max-height: 2.5rem;
            }

            label:has(input[type="checkbox"].switch) {
                padding: 0 calc(10px * 24 / 18);
                min-width: 16rem;
                height: 2.5rem;
                min-height: 2.5rem;
                max-height: 2.5rem;

                > input {
                    margin-left: auto;
                }
            }

            hr {
                border-width: 1px !important;
                border-top-style: none !important;
                border-left-style: solid !important;
                border-color: var(--color-muted-hover) !important;
                width: 0;
                height: 2.5rem;
            }

            div.group {
                position: relative;

                > div:not(.group) {
                    display: none;
                    position: absolute;
                    top: 100%;
                    left: 0;
                    flex-direction: column;
                    justify-content: flex-start;
                    align-items: flex-start;
                    background-color: var(--color-muted);
                }

                &:hover > div:not(.group) {
                    display: flex;
                }

                button.button {
                    justify-content: flex-start;
                    width: 100%;
                }

                hr {
                    border-top-style: solid !important;
                    border-left-style: none !important;
                    width: 100%;
                    height: 0;
                }

                div.group > div:not(.group) {
                    top: 0;
                    left: 100%;
                }
            }

            div.color-palette {
                display: flex;
                flex-direction: row;
                flex-wrap: wrap;
                justify-content: flex-start;
                align-items: flex-start;
                gap: 0.5rem;
                padding: calc(10px * 24 / 18);
                width: calc(2rem * 3 + 0.5rem * 2 + (10px * 24 / 18) * 2);

                > button {
                    cursor: pointer;
                    width: 2rem;
                    height: 2rem;
                }
            }
        }

        /* Blocks */
        .block {
            display: flex;
            flex-direction: row;
            justify-content: flex-start;
            align-items: start;
            gap: 0.375rem;
            width: 100%;
            height: auto;
            min-height: 2rem;

            > .controls {
                display: flex;
                flex-direction: row;
                align-items: flex-start;
                opacity: 0;
                transition-duration: 150ms;
                transition-property: opacity;
                transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
                pointer-events: none;

                .button {
                    padding: 0 0.375rem;
                    min-width: 2rem;
                    height: 2rem;
                    min-height: 2rem;
                    max-height: 2rem;
                }

                .draggable {
                    cursor: grab;
                }
            }

            > .content {
                flex-grow: 1;
                width: 100%;
                min-height: 32px;
            }

            &.dragging:hover .controls {
                opacity: 1;
                pointer-events: all;

                .draggable {
                    cursor: grabbing;
                }
            }

            &.ghost-dragged {
                opacity: 0;
            }

            &:first-child {
                margin-top: 0 !important;
            }

            &:last-child {
                margin-bottom: 0 !important;
            }
        }

        .block-list:not(:has(.dragging)) .block:hover {
            > .controls {
                opacity: 1;
                pointer-events: all;
            }
        }
    }

    /* Blocks */
    heading-block {
        margin-top: calc(var(--space) * 3);
        margin-bottom: var(--space);

        .content {
            outline: none;
            padding-top: 0.125rem;
            color: var(--color-foreground);
            font-style: normal;
            font-weight: 600;
            font-size: 1.25rem;
            line-height: calc(1.75 / 1.25);
            font-family: var(--font-sans);
            letter-spacing: 0em;
            text-align: left;

            /* Placeholder */
            &:has(:first-child.ProseMirror-trailingBreak)::before {
                position: absolute;
                content: "Escribe tu título aquí...";
                color: light-dark(var(--color-gray-40), var(--color-gray-60));
            }
        }
    }

    paragraph-block {
        margin-top: var(--space);
        margin-bottom: var(--space);

        .content {
            cursor: text;
            outline: none;
            padding-top: 0.25rem;
            color: var(--color-foreground-variant);
            font-style: normal;
            font-weight: 400;
            font-size: 1rem;
            line-height: calc(1.5 / 1);
            font-family: var(--font-sans);
            letter-spacing: 0em;
            text-align: justify;

            /* Placeholder */
            &:has(:first-child.ProseMirror-trailingBreak)::before {
                position: absolute;
                content: "Escribe tu párrafo aquí...";
                color: light-dark(var(--color-gray-40), var(--color-gray-60));
            }

            /* Text styles */
            a {
                transition-duration: 150ms;
                transition-property: color;
                transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
                color: var(--color-accent);
                font-weight: 600;

                &:hover {
                    color: var(--color-accent-hover);
                }
            }

            b {
                color: var(--color-foreground-variant);
                font-weight: 600;
            }
        }
    }
</style>

<script src="./editor.ts"></script>

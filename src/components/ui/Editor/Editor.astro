---
import type { BaseProps } from "@interfaces/props";

import Image from "../Image.astro";

export interface Props extends BaseProps {
    value?: any[];
}

const { value, id, style, class: cls } = Astro.props;
---

<block-editor {id} {style} class:list={cls} class="editor h-auto w-full">
    {
        value && (
            <script
                is:inline
                type="application/json"
                set:html={JSON.stringify(value)}
            />
        )
    }
</block-editor>

<style is:global>
    /* Editor */
    block-editor {
        /* Block List */
        .block-list {
            display: flex;
            flex-direction: column;
            justify-content: start;
            align-items: start;
        }

        /* Toolbar */
        .toolbar {
            display: flex;
            position: absolute;
            top: 0;
            left: 0;
            flex-direction: row;
            justify-content: center;
            translate: -50% -100%;
            z-index: 10;
            background-color: var(--color-muted);
            width: auto;
            height: 40px;
            min-height: 40px;
            max-height: 40px;

            /* Components */
            button.button {
                padding: 0 calc(10px * 24 / 18);
                min-width: 2.5rem;
                height: 2.5rem;
                min-height: 2.5rem;
                max-height: 2.5rem;
                text-wrap: nowrap;

                &.button-fill-accent {
                    background-color: light-dark(
                        var(--color-blue-10),
                        var(--color-blue-90)
                    );
                    color: var(--color-accent);

                    &:hover {
                        background-color: light-dark(
                            var(--color-blue-10-hover),
                            var(--color-blue-90-hover)
                        );
                    }
                }

                &.button-fill-destructive {
                    background-color: light-dark(
                        var(--color-red-10),
                        var(--color-red-90)
                    );
                    color: var(--color-error);

                    &:hover {
                        background-color: light-dark(
                            var(--color-red-10-hover),
                            var(--color-red-90-hover)
                        );
                    }
                }

                &:has(i:first-child) {
                    padding-left: 10px;
                }

                &:has(i:last-child) {
                    padding-right: 10px;
                }
            }

            input[type="text"].input,
            input[type="number"].input {
                border: none;
                padding: 0 calc(10px * 24 / 18);
                min-width: 16rem;
                height: 2.5rem;
                min-height: 2.5rem;
                max-height: 2.5rem;

                &[type="number"] {
                    min-width: 8rem;
                }
            }

            label:has(input[type="checkbox"].switch) {
                padding: 0 calc(10px * 24 / 18);
                min-width: 16rem;
                height: 2.5rem;
                min-height: 2.5rem;
                max-height: 2.5rem;

                > input {
                    margin-left: auto;
                }
            }

            hr {
                border-width: 1px !important;
                border-top-style: none !important;
                border-left-style: solid !important;
                border-color: var(--color-muted-hover) !important;
                width: 0;
                height: 2.5rem;
            }

            div.group {
                position: relative;

                > div:not(.group) {
                    display: none;
                    position: absolute;
                    top: 100%;
                    left: 0;
                    flex-direction: column;
                    justify-content: flex-start;
                    align-items: flex-start;
                    background-color: var(--color-muted);
                }

                &:hover > div:not(.group) {
                    display: flex;
                }

                button.button {
                    justify-content: flex-start;
                    width: 100%;
                }

                hr {
                    border-top-style: solid !important;
                    border-left-style: none !important;
                    width: 100%;
                    height: 0;
                }

                div.group > div:not(.group) {
                    top: 0;
                    left: 100%;
                }
            }

            div.color-palette {
                display: flex;
                flex-direction: row;
                flex-wrap: wrap;
                justify-content: flex-start;
                align-items: flex-start;
                gap: 0.5rem;
                padding: calc(10px * 24 / 18);
                width: calc(2rem * 3 + 0.5rem * 2 + (10px * 24 / 18) * 2);

                > button {
                    cursor: pointer;
                    width: 2rem;
                    height: 2rem;
                }
            }
        }

        /* Blocks */
        .block {
            display: flex;
            flex-direction: row;
            justify-content: flex-start;
            align-items: start;
            gap: 0.375rem;
            width: 100%;
            height: auto;
            min-height: 2rem;

            > .controls {
                display: flex;
                flex-direction: row;
                align-items: flex-start;
                opacity: 0;
                transition-duration: 150ms;
                transition-property: opacity;
                transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
                pointer-events: none;

                .button {
                    padding: 0 0.375rem;
                    min-width: 2rem;
                    height: 2rem;
                    min-height: 2rem;
                    max-height: 2rem;
                }

                .draggable {
                    cursor: grab;
                }
            }

            > .content {
                flex-grow: 1;
                width: 0;
                min-height: 32px;
            }

            &.dragging:hover .controls {
                opacity: 1;
                pointer-events: all;

                .draggable {
                    cursor: grabbing;
                }
            }

            &.ghost-dragged {
                opacity: 0;
            }

            &:first-child {
                margin-top: 0 !important;
            }

            &:last-child {
                margin-bottom: 0 !important;
            }
        }

        .block-list:not(:has(.dragging)) .block:hover {
            > .controls {
                opacity: 1;
                pointer-events: all;
            }
        }
    }

    /* Blocks */
    heading-block {
        margin-top: calc(var(--space) * 3);
        margin-bottom: var(--space);

        > .content {
            outline: none;
            padding-top: 0.125rem;
            color: var(--color-foreground);
            font-style: normal;
            font-weight: 600;
            font-size: 1.25rem;
            line-height: calc(1.75 / 1.25);
            font-family: var(--font-sans);
            letter-spacing: 0em;
            text-align: left;

            /* Placeholder */
            &:has(:first-child.ProseMirror-trailingBreak)::before {
                position: absolute;
                content: "Escribe tu título aquí...";
                color: light-dark(var(--color-gray-40), var(--color-gray-60));
            }
        }
    }

    paragraph-block {
        margin-top: var(--space);
        margin-bottom: var(--space);

        > .content {
            cursor: text;
            outline: none;
            padding-top: 0.25rem;
            color: var(--color-foreground-variant);
            font-style: normal;
            font-weight: 400;
            font-size: 1rem;
            line-height: calc(1.5 / 1);
            font-family: var(--font-sans);
            letter-spacing: 0em;
            text-align: justify;

            /* Placeholder */
            &:has(:first-child.ProseMirror-trailingBreak)::before {
                position: absolute;
                content: "Escribe tu párrafo aquí...";
                color: light-dark(var(--color-gray-40), var(--color-gray-60));
            }

            /* Text styles */
            a {
                transition-duration: 150ms;
                transition-property: color;
                transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
                color: var(--color-accent);
                font-weight: 600;

                &:hover {
                    color: var(--color-accent-hover);
                }
            }

            b {
                color: var(--color-foreground-variant);
                font-weight: 600;
            }
        }
    }

    image-block {
        margin-top: calc(var(--space) * 2);
        margin-bottom: calc(var(--space) * 2);

        > .content {
            background-color: var(--color-muted);
            aspect-ratio: auto;
            object-fit: cover;
            -webkit-user-select: none;
            user-select: none;
        }
    }

    video-block {
        margin-top: calc(var(--space) * 2);
        margin-bottom: calc(var(--space) * 2);

        > .content {
            position: relative;
            background-color: var(--color-muted);
            aspect-ratio: 16/9;
            -webkit-user-select: none;
            user-select: none;

            > img {
                outline: none;
                border: none;
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            > span {
                position: absolute;
                top: 0;
                left: 0;
                background: linear-gradient(
                    to bottom in oklab,
                    rgba(0, 0, 0, 0.6) 0%,
                    rgba(0, 0, 0, 0) 100%
                );
                padding: 1.5rem;
                width: 100%;
                height: 6rem;
                color: var(--color-white);
                font-style: normal;
                font-weight: 600;
                font-size: 1.25rem;
                line-height: calc(1.75 / 1.25);
                font-family: var(--font-sans);
                letter-spacing: 0em;
            }

            > a {
                display: inline-flex;
                position: absolute;
                top: 50%;
                left: 50%;
                justify-content: center;
                align-items: center;
                translate: -50% -50%;
                border-radius: calc(infinity * 1px);
                background-color: var(--color-primary);
                width: 5rem;
                height: 5rem;

                &::before {
                    content: "\efa0";
                    color: var(--color-primary-foreground);
                    font-style: normal;
                    font-weight: 400;
                    font-size: 1.25rem;
                    line-height: 1;
                    font-family: var(--font-icon);
                    text-transform: none;
                    -webkit-font-smoothing: antialiased;
                    -moz-osx-font-smoothing: grayscale;
                }
            }
        }
    }

    mosaic-block {
        margin-top: calc(var(--space) * 2);
        margin-bottom: calc(var(--space) * 2);

        > .content {
            display: grid;
            justify-content: center;
            align-items: center;
            gap: calc(var(--space) * 4);

            > .block {
                grid-row: auto;
                grid-column: auto;
                margin: 0;
                width: 100%;
                height: 100%;

                > .content {
                    aspect-ratio: auto !important;
                    width: 100%;
                    height: 100%;
                }
            }
        }
    }
</style>

<script>
    import Sortable from "sortablejs";
    import { HeadingBlock } from "./components/heading_block";
    import { ParagraphBlock } from "./components/paragraph_block";
    import type { Toolbar } from "./components/toolbar";
    import { Block, type BlockType } from "./interfaces/block";
    import type { Editor } from "./interfaces/editor";
    import { ImageBlock } from "./components/image_block";
    import { VideoBlock } from "./components/video_block";
    import { MosaicBlock } from "./components/mosaic_block";

    class BlockEditor extends HTMLElement implements Editor {
        private readonly blocks: HTMLDivElement;
        private toolbar: Toolbar | null;

        constructor() {
            super();
            // Blocks list
            this.blocks = document.createElement("div");
            this.blocks.classList.add("block-list");
            new Sortable(this.blocks, {
                handle: ".draggable",
                direction: "vertical",
                chosenClass: "dragging",
                ghostClass: "ghost-dragged",
                animation: 150,
                onStart: () => this.hideToolbar()
            });
            this.appendChild(this.blocks);
            // Toolbar
            this.toolbar = null;
            document.addEventListener("click", ({ target }) => {
                if (!this.toolbar?.element.contains(target as Node)) {
                    this.hideToolbar();
                }
            });
        }

        addBlock(
            type: BlockType,
            params: { style?: any; data?: any | any[] } = {},
            ref?: Block
        ) {
            const block = document.createElement(`${type}-block`) as Block;

            block.load(params);
            this.blocks.insertBefore(block, ref?.nextSibling ?? null);
        }

        removeBlock(element: Block) {
            const block = this.blocks.removeChild(element);

            block.destroy();
            if (this.blocks.children.length === 0) {
                this.addBlock("paragraph");
            }
        }

        load(data: any[]) {
            this.clear();
            data.forEach(({ type, style, data }) =>
                this.addBlock(type, { style, data })
            );
        }

        save() {
            return [...this.blocks.children]
                .filter((e) => e instanceof Block)
                .map((block: Block) => {
                    const { type } = block;
                    const { style, data } = block.save();

                    return { type, style, data };
                });
        }

        clear() {
            [...this.blocks.children].forEach((element) => {
                const block = this.blocks.removeChild(element);

                if (block instanceof Block) {
                    block.destroy();
                }
            });
        }

        showToolbar(block: Block) {
            if (this.toolbar) {
                this.hideToolbar();
            }
            this.toolbar = block.toolbar();
            if (this.toolbar) {
                this.appendChild(this.toolbar.element);
            }
        }

        hideToolbar() {
            if (this.toolbar) {
                this.removeChild(this.toolbar.element);
            }
            this.toolbar = null;
        }

        connectedCallback() {
            const data = this.querySelector<HTMLScriptElement>(
                "script[type='application/json']"
            );

            if (data) {
                data.remove();
                this.load(JSON.parse(data.textContent));
            } else {
                this.addBlock("paragraph");
            }
        }
    }

    // Define elements
    customElements.define("heading-block", HeadingBlock);
    customElements.define("paragraph-block", ParagraphBlock);
    customElements.define("image-block", ImageBlock);
    customElements.define("video-block", VideoBlock);
    customElements.define("mosaic-block", MosaicBlock);
    customElements.define("block-editor", BlockEditor);
</script>
